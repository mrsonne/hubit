components:

# Calculates the liquid volume and composition for the first cell
  - &total_comp
    path: ./components/total_comp.py
    index_scope:
      IDX_CELL: "0"
    provides_results: 
      - name: mole_numbers
        path: batches[IDX_BATCH].cells[IDX_CELL].mole_numbers
    consumes_input:
      - name: liq_composition
        path: feed.liq_composition
      - name: V_liq
        path: feed.V_liq
      # - name: solid_composition
      #   path: batches[IDX_BATCH-1].cells[IDX_CELL].sol_composition

# Overwrites the source for liquid composition and liquid volume
  - <<: *total_comp
    index_scope:
      IDX_CELL: "1:"
    consumes_results:
      - name: liq_composition
        path: batches[IDX_BATCH].cells[IDX_CELL-1].liq_composition
      - name: V_liq
        path: batches[IDX_BATCH].cells[IDX_CELL-1].V_liq
      # - name: solid_composition
      #   path: batches[IDX_BATCH-1].cells[IDX_CELL].sol_composition

#  Find concentrations in liquid and solid phases based on total conc 
#  Same for all cells & batches
  - path: ./components/eq_non_competitive.py
    provides_results: 
      - name: liq_composition
        path: batches[IDX_BATCH].cells[IDX_CELL].liq_composition
      - name: sol_composition
        path: batches[IDX_BATCH].cells[IDX_CELL].sol_composition
      - name: V_liq
        path: batches[IDX_BATCH].cells[IDX_CELL].V_liq
    consumes_results:
      - name: V_liq
        path: batches[IDX_BATCH].cells[IDX_CELL-1].V_liq
      - name: mole_numbers
        path: batches[IDX_BATCH].cells[IDX_CELL].mole_numbers
    consumes_input:
      - name: cell
        path: batches[IDX_BATCH].cells[IDX_CELL]
